#include <iostream>
#include <thread>
#include <chrono>

using namespace std;
using namespace chrono;

void Wait()
{
	cout << "서브 스레드 시작" << endl;

	this_thread::sleep_for(seconds(1));	// 1초간 대기

	cout << "서브 스레드 종료" << endl;
}

int main()								// main() 함수를 실행하기 위해서 스레드 1개는 무조건 사용하게 된다.
{										// main() 함수를 실행하는 스레드를 메인 스레드라고 한다.
	cout << "메인 스레드 시작" << endl;

	thread t = thread{ Wait };			// 스레드 안에서 새로운 스레드를 생성할 수 있으며, 실행할 메서드의 이름을 전달해야 한다.
										// 생성된 스레드는 설정한 함수만을 연산한다.
										// C#은 서브 스레드를 포그라운드, 백그라운드 설정할 수 있지만 C나 C++은 백그라운드로만 생성 가능
										// 포그라운드는 메인 스레드가 종료되도 서브 스레드가 종료될 때 까지 프로그램이 살아있게 된다.
										// 백그라운드는 메인 스레드가 종료되면 서브 스레드는 자동으로 중단된다.

	t.join();	// t가 끝날 때까지 메인 스레드는 대기한다.
				// 조인을 하지 않으면 메인 스레드가 서브 스레드보다 먼저 종료하게 되므로 오류가 발생할 수 있다.
				// 조인을 한다는 의미는 컴퓨터 의미로 스레드 변수 t가 실행중인 서브 스레드를 가리키고 있다는 의미다.
				// 메인 스레드에서 서브 스레드의 연산 결과값이 필요하다는 의도에서다.
				// 연산 결과값이 필요없다면 조인을 하지 않아도 되며, 스레드 변수가 서브 스레드를 가리키지 않게 하면 된다.
				// 그냥 스레드를 생성하면 조인을 해줘야 하며, 조인을 하지 않게 스레드를 생성하는 방법은 따로 있다.
				// C#은 스레드 변수가 실행중인 서브 스레드를 가리키고 있을 때 조인을 하지 않아도 오류가 없다.

	cout << "메인 스레드 종료" << endl;
}